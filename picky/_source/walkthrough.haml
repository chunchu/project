---
title: Walkthrough
layout: default
---

.container_2
  %h2#walkthrough Walkthrough Example: Server and client.
  .grid_1
    %h2 Client
    %p
      This column describes using a few examples how to set up a client and a front end for the picky server, described in the right column.
    %h3 Setup
    %p
      The examples assume you're using a Sinatra/Padrino or Rails app.
    %p
      Start by getting the picky-client gem and adding it to your Gemfile. You could go on without it but it helps a lot.
    %code
      %pre
        :preserve
          gem install picky-client

          gem 'picky-client'
    %p
      Don't forget to do a
    %code
      %pre
        bundle update
    %p
      And that's already it for the client setup! Easy, isn't it? The configuration isn't much harder.
  .grid_1
    %h2 Server
    %p
      This column describes using a few examples how to set up the picky server. You can actually read both columns back and forth if you want. Like ping pong. Played by two chinese master ping-pong pandas. (Not by me, then you'd already stop at gem install. And the table would be on fire.)
    %h3 Setup
    %p
      It starts out the same as in the Getting Started section. But this time, we do an actual example picky project called library_search. For that, we use the
    %code
      %pre
        picky generate unicorn_server &lt;project name&gt;
    %p
      command that has been installed with the picky gem.
    %code
      %pre
        :preserve
          gem install picky-generators

          picky generate unicorn_server library_search

          cd library_search

          bundle install
    %p
      You now have a nice directory (library_search) set up with all the needed Gems, ready to go!
  .grid_2
  .grid_1
    %h3 Configuration (Sinatra/Rails etc. Controller)
    %p
      The Picky client provides an API to access the server. It looks like this:
    %code
      %pre
        :preserve
          # The options define where the Picky server that
          # you have already set up is found.
          # (Haven't set it up yet – see the right column on
          # how to do this, then come back here)
          #
          # Options are:
          #  * host  # e.g. 'localhost'
          #  * port  # e.g. 8080
          #  * path  # e.g. '/books'
          #
          Picky::Client.new options
    %p
      Usually, what I do is save the Picky client instance in a constant, like FullBooks, or BookSearch.
      This is so I can reuse that instance.
    %p
      Since this configuration is environment specific, it is best – in Rails – to put it into development.rb / production.rb / test.rb.
    %code
      %pre
        :preserve
          # In development.rb:
          #
          BookSearch = Picky::Client.new(
            :host => 'localhost',
            :port => 8080,
            :path => '/books'
          )
    %p
      The BookSearch constant is ready for use in your controller actions!
    %p
      Please continue below to see how to use the configured searches.
  .grid_1
    %h3 Configuration
    %p
      The most important file in your project is
      %strong app/application.rb
    %p
      It defines how all the indexing and the searching is handled, and even the routing.
    %h4 Define how the indexing works
    %p What characters pass through, which words are removed (stopwords), how is the text tokenized, i.e., split?
    %code
      %pre
        :preserve
          # In app/application.rb, find this stub
          # and adapt the examples.
          #
          default_indexing removes_characters:
                             /[^a-zA-Z0-9\s\/\-\"\&\.]/
                           ...
    %h4 Define a few indexes.
    %p It's easy. If you have a filled database table ready, it's even easier.
    %code
      %pre
        :preserve
          # In app/application.rb, find this stub
          # and adapt the examples.
          #
          # Indexes have an identifier, e.g., :books, a source,
          # which here is a database table, and a number of categories.
          # (With a database source, the categories are equivalent
          # to the fields)
          #
          books_index = Index::Memory.new :books, Sources::DB.new(
              'SELECT id, title, author, description FROM books',
              :file => 'app/db.yml'
            ) do
            category :title, # identifier
                     :qualifiers => [:t, :title],
                     :similarity => Similarity::DoubleLevenshtone.new(3)
            category ...
          end
    %p
      An index has
      %ol
        %li an identifier (for index directory naming/referencing by Indexes[:identifier]),

        %li
          a data source (find out more on
          %a{ :href => 'http://github.com/floere/picky/wiki/Sources-Configuration' } Sources in the Wiki
          ), and

        %li
          a number of categories (find out more
          %a{ :href => 'http://github.com/floere/picky/wiki/Categories-Configuration' } Categories in the Wiki
          in the Wiki), and finally,

        %li a number of options.
    %h4 Define how querying works, i.e., query text is handled.
    %p
      After having defined the indexing, this is a piece of cake, since it works the same way.
    %code
      %pre
        :preserve
          # In app/application.rb, find this stub
          # and adapt the examples.
          #
          default_querying removes_characters:
                             /[^a-zA-Z0-9\s\"\~\*\:]/
          ...
    %h4 Queries
    %p Define a few queries.
    %code
      %pre
        :preserve
          # In app/application.rb, find this stub
          # and adapt the examples.
          #
          # A full search returns ids, while a live search doesn't.
          #
          # The options define weights which will give bonus points
          # to certain combinations. If only title words are found,
          # a hefty bonus of 6 is given, which is very high.
          #
          # If a title is found before the author, like
          # "the hobbit, tolkien", 3 points are awarded.
          #
          options = {
            :weights => Query::Weights.new([:title] => 6,
                                           [:title, :author] => 3)
          }
          full_search = Query::Full.new(books_index, options)
          live_search = Query::Live.new(books_index, options)

          # It's possible to use multiple indexes in a query.
          #
          multi_search = Query::Full.new(
                           books_index,
                           dvd_index,
                           mp3_index
                         )
    %p
      Find out more in the
      %a{ :href => 'http://github.com/floere/picky/wiki/Queries-Configuration' } Wiki on Query Configuration
    %h4 Map some URL paths
    %p Phew! Almost done :)
    %code
      %pre
        :preserve
          # In app/application.rb, find this stub
          # and adapt the examples.
          #
          # The method "route" maps URL paths to queries.
          # Use regexps or strings to define paths.
          #
          route %r{^/tracks/full} => full_search
          route %r{^/tracks/live} => live_search
    %p
      Find out more in the
      %a{ :href => 'http://github.com/floere/picky/wiki/Routing-configuration' } Wiki on Routing Queries
    %h3 Indexing
    %p Finally! Let picky have a look at the data!
    %code
      %pre
        rake index
    %h3 Gentlemen, start your engines
    %code
      %pre
        rake start
    %p
      will start an Unicorn.
    %h3 Refine!
    %p Define similarity searches, more specific indexes, more searches, etc.
  .grid_2
  .grid_1
    %h3 Usage (Controller)
    %p
      Now that you have defined the constants, let's use them!
    %p
      The client provides a handy #search method, with the signature
      %strong search(options)
      where the options are:
      %ul
        %li query: the query text
        %li offset: the result offset (default 0, only used in Full)
    %code
      %pre
        :preserve
          # In a controller, e.g. the index action:
          #
          def index
            # A Picky client has a search method with some options:
            # * query: The query to be sent to Picky.
            # * offset: An offset on the result ids. # Default is 0.
            #
            results = FullBooks.search :query => 'hello picky'
    %p
      If the server is running, just try it! The results should be a hash with the result data.
    %p
      Now, this is nice, but not very useful, is it? Picky can make that hash a bit more accessible with Picky::Convenience™.
    %code
      %pre
        :preserve
          # Still in the controller action:
          #
          results = FullBooks.search ...

          # Make the hash a bit more self-aware.
          #
          results.extend Picky::Convenience

          # Now you get:
          #
          results.empty?
          results.ids 10    # First 10 ids. Default is 20.
          results.clear_ids # Remove all ids.
          results.allocations
          results.allocations_size
          results.total     # The total amount of found ids.

          # The method I use most often is
          # populate_with, as this populates the results
          # with rendered results (using the ids), not
          # just the ids themselves.
          #
          # Note: Also clears the ids with clear_ids.
          #
          results.populate_with Book do |book|
            # book is a model. Render it however you want.
            book.to_s
          end

          # If you use the provided Picky JavaScript frontend,
          # then encode it in JSON before sending it off.
          #
          ActiveSupport::JSON.encode results
    %p
      And that was it for the controller. It looks large, but when reduced to the essential lines, it is just this:
    %code
      %pre
        :preserve
          # In an initializer or environment.
          #
          FullBooks = Picky::Client::Full.new ...
          LiveBooks = Picky::Client::Live.new ...

          # In a controller action.
          #
          results = FullBooks.search ...
          results.populate_with Book { |book| book.to_s }
          ActiveSupport::JSON.encode results
    %p
      Unbeatably easy, right?
    %p
      If you don't want to render the results in the controller, use #entries to render them in a view and use #populate_with without the rendering block.
    %code
      %pre
        :preserve
          # In a controller action.
          #
          results = FullBooks.search ...
          results.populate_with Book

          # In your view:
          #
          results.entries do |book|
            render book
          end
          ActiveSupport::JSON.encode results
  .grid_1
    %h3 Usage (Of the Server)
    %p
      Either from Sinatra/Rails/Padrino/Camping etc. through the picky client (see left column) or using for example curl to access the json data from the server directly:
    %code
      %pre
        curl 'localhost:8080/books?offset=10&query=test'
    %p
      Or access it from any app server in any language. The data you get is JSON, for which lots of good libraries are available.
    %h3 Is something not correctly indexed?
    %code
      %pre
        :preserve
          rake 'try[My Words That Do Not Work]'
    %p Words to find should be indexed in basically the same way as the query processes them.
  .grid_2
  .grid_1
    %h3 The provided JS frontend.
    %p
      Picky provides a html structure which is in turn used by the Picky JS frontend.
    %p
      Add the following line to your views (here in haml glory):
    %code
      %pre
        :preserve
          = Picky::Helper.cached_interface options
    %p or
    %code
      %pre
        :preserve
          = Picky::Helper.interface options
    %p
      The options (defaults after the ||) are
    %code
      %pre
        :preserve
          options[:button]     || 'search'
          options[:no_results] || 'Sorry, no results found!'
          options[:more]       || 'more'
    %p
      This enables you to pass in your own translated texts. If you have only one language I suggest you use #cached_interface.
    %p
      With the HTML structure in place, let's take a look at the Javascript.
    %p
      The simplest example that works is:
    %code
      %pre
        :preserve
          new PickyClient({
            full: '/search/full', // Displays the rendered results.
            live: '/search/live'  // Just updates the count.
          });
    %p
      You'd of course use the urls you want.
    %p
      A more complicated example looks like this:
    %code
      %pre
        :preserve
          pickyClient = new PickyClient({
            // A full query displays the rendered results.
            //
            full: '/search/full',

            // A live query just updates the count.
            //
            live: '/search/live',

            // Optional. Default is 10.
            //
            showResultsLimit: 20,

            // Optional. Before Picky sends any data.
            //
            before: function(params, query, offset) {
              console.log('Going to send your query. Oh boy!');
            },

            // Optional. Just after Picky receives data.
            //           (Get a PickyData object)
            //
            success: function(data, query) {
              console.log('Received the data.');
            },

            // Optional. After Picky has handled the
            //           data and updated the view.
            //
            after: function(data, query) {
              console.log('Found what you were looking for?');
            },

            // This is used to generate the correct query
            // strings, localized. E.g. "subject:war".
            //
            // Optional. If you don't give these, the
            // category identifier given in the Picky server
            // is used.
            //
            qualifiers: {
              en:{
                subjects:  'subject'
              }
            },

            // This is used to explain the preceding word
            // in the suggestion text, localized.
            // E.g. "Peter (author)".
            //
            // Optional. Default are the category identifiers
            //           from the Picky server.
            //
            explanations: {
              en:{
                title:     'titled',
                author:    'written by',
                isbn:      'ISBN-13',
                year:      'published in',
                publisher: 'published by',
                subjects:  'topics'
              }
            }
          });

          // An initial search text.
          //
          pickyClient.insert('initial search text');
    %p
      And that's basically it. Wish you great success!
  .grid_1
    %h3 Usage (Become a Picky master)
    %p 1. An asterisk (*) makes picky search for a partial hit. (If the index supports that)
    %code
      %pre
        part*
    %p also finds partial, party, partogenesology.
    %p 2. The last word in a query is always partially searched.
    %code
      %pre
        my beautiful query
    %p is actually
    %code
      %pre
        my beautiful query*
    %p 3. Asterisk searches can be stopped.
    %code
      %pre
        "part"
    %p only finds "part", and nothing else.
    %p 4. If you have defined a similarity index on a category, a tilde (~) will look for similar matches.
    %code
      %pre
        my beoootiful~ query
    %p will also find your "beautiful" query.
    %p 5. Qualifiers can be used with a colon (:)
    %code
      %pre
        title:ulysses author:joyce
    %p will narrow the search space to complex novels.
    %p 6. The above options can be combined.
    %code
      %pre
        name:flurion~ hank*
    %p will find me.
    %p That is all, young grasshopper. Be on your way :)